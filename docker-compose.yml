version: "3.2"

networks:
  frontend:
  backend:

services:

  webmvc:
    image: shoes/mvc
    build: 
      context: .\src\Web\WebMvc
      dockerfile: Dockerfile
    environment: 
      - CatalogUrl=http://catalog
      - IdentityUrl=http://192.168.100.4:5000
      - CartUrl=http://cart
      - OrderUrl=http://order
    container_name: webshop
    ports:
      - "5200:80"
    networks:
      - frontend 
    depends_on:
      - catalog
      - tokenserver
      - cart
      - order


  catalog:
    image: shoes/cart
    build:
      context: .\src\Services\ProductCatalogApi
      dockerfile: Dockerfile
    image: shoes/catalog
    environment:
      - DatabaseServer=mssqlserver
      - DatabaseName=CatalogDb
      - DatabaseUser=sa
      - DatabaseUserPassword=ProductApi(!)
    container_name: catalogapi
    ports:
      - "5100:80"
    networks:
      - backend
      - frontend
    depends_on:
      - mssqlserver

  cart:
    image: shoes/catalog
    build: 
      context: .\src\Services\CartApi
      dockerfile: Dockerfile
    environment: 
      - ASPNETCORE_ENVIRONMENT=Development 
      - IdentityUrl=http://192.168.100.4:5000
    container_name: cartapi
    ports:
      - "5500:80"
    networks:
      - backend
      - frontend 
    depends_on:
      - basket.data
      - tokenserver

  order:
    image: shoes/order
    build: 
      context: .\src\Services\OrderApi
      dockerfile: Dockerfile
    environment: 
      - ASPNETCORE_ENVIRONMENT=Development 
      - IdentityUrl=http://tokenserver
      - SQLSERVER_HOST=mssqldata
      - SA_PASSWORD=ProductApi(!)
      - DATABASE=OrdersDb
    container_name: orderapi
    ports:
      - "5600:80"
    networks:
      - backend
      - frontend 
    depends_on:
      - mssqlserver
      - tokenserver 

  tokenserver:
    image: shoes/tokenservice
    build: 
      context: .\src\Services\TokenServiceApi
      dockerfile: Dockerfile
    environment: 
      - ASPNETCORE_ENVIRONMENT=Development 
      - MvcClient=http://localhost:5200
      - BasketApiClient=http://localhost:5500
      - OrderApiClient=http://localhost:5600
    container_name: tokenserviceapi
    ports:
      - "5000:80"
    networks:
      - backend
      - frontend 
    depends_on:
      - mssqlserver
         
  mssqlserver:
    image: "microsoft/mssql-server-linux:latest"
    ports:
      - "1445:1433"
    container_name: mssqlcontainer
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=ProductApi(!)
    networks:
      - backend

  basket.data:
    image: redis
    ports:
      - "6377:6379"  
    networks:
      - backend 